var _0x52c0 = ['Verdana', 'GetEnemies', 'Rage', 'Unload', 'Misc', 'ursus knife', 'IsKeyPressed', 'ssg 08', 'scar 20', 'CBaseEntity', 'mag 7', 'AddDropdown', 'Anti-Aim', 'idk this shit pasted script ', 'Prefer safe point', 'mp5 sd', 'PISTOL', 'Extra', 'AddSliderInt', 'lby_type', 'Prefer onshot bind', 'Slowwalking', 'AWP', 'on_player_connect', 'SSG Mindmg', 'mp9', 'Sway', 'round_start', 'Hide shots', 'Curtime', 'PP bizon', 'decoy grenade', 'length', 'SetRealOffset', 'P90', 'm249', 'Fake-Lag', 'Send', 'body_type', 'Draw', 'GetEntityFromUserID', 'molotov', 'negev', 'gut knife', 'AWP Mindmg', 'Force body aim', 'desert eagle', 'Minimum damage', 'AddFont', 'real_type', 'CBaseCombatWeapon', 'Keybinds', 'p2000', 'Standing', 'm4a1 s', 'StringCustom', 'Rage Anti-Aim', 'min', 'AddColorPicker', 'r8 revolver', 'Turn speed', 'Move AA Mode', 'Prefer Body', 'JAVASCRIPT', 'xm1014', 'Fake duck', 'SetOverride', 'Accuracy', 'onCM', 'SetFakeOffset', 'Strafer Speed', 'on_draw', 'Force Safe Point', '_TBC_CREATE_MOVE', 'sqrt', 'zeus x27', 'on_create_move', 'Line', 'g3sg1', '____________', 'Y 0ffset', 'Verdana Bold', 'Jitter', 'm9 bayonet', 'w1pe', 'Fake angles', 'LBY', 'toString', 'Prefer Body Aim', 'tec9', '[toggled]', 'GetFakeYaw', 'glock 18', '_______________________', 'stiletto knife', 'GetViewAngles', 'O N   S H O T', 'GetScreenSize', '___________________________________', 'DT + indicator', 'Duck peek assist', 'X 0ffset', 'Prefer onshot', 'nova', 'AddMultiDropdown', 'R8 Mindmg', 'Movement', 'Color Picker', 'Prefer Safe Point', 'AUTO Mindmg', '              ', 'Opposite', 'RegisterCallback', 'p90', 'BGcordOwnedshit script Color', 'floor', 'bullet_impact', '_TBC_UNLOAD', 'Latency', 'indexOf', 'SetValue', 'famas', 'Targeting', 'aug', 'CPlayerResource', 'push', 'Lethal', 'reset', 'm_vecVelocity[0]', 'Prefer body aim', 'Real', 'apply', 'tec 9', 'm_flNextPrimaryAttack', 'lagsync', 'tick | ', 'GradientRect', 'GetFloat', 'TickInterval', 'Mindmg override', 'negav', '----------------', 'ForceHitboxSafety', 'IgnoreTarget', 'CCSPlayer', 'Recharge', 'usp s', 'Choke', 'Prefer onshot indicator', 'karambit', 'Prefer Safe Point value HP', 'shadow daggers', 'ak 47', 'Default', 'Quick peek', 'abs', 'Auto peek', 'Anti Aim', 'AddCheckbox', 'GetHitboxPosition', 'random', 'D T   |   S T A T E: 0 tickbase (v): 0   ', 'Low delta on slowwalk', 'cz75 auto', 'PrintColor', 'Tickcount', 'pp bizon', 'GetColor', 'CreateMove', 'Force Safe Point value HP', '_______________', 'Force Body Aim', 'mp7', 'GetUsername', 'GetEyePosition', 'main', 'Jitter offset', '_________________', 'Shot', 'display', 'Slow walk', 'Disable', 'IsValid', 'Exploits', 'getMinutes', 'OverrideShift', 'TextSizeCustom', 'CBasePlayer', 'ms | ', 'GetMapName', 'Switch', 'Prefer Body Aim value HP', 'GetWeapon', 'flip knife', 'on_weapon_fire', 'mac 10', 'splice', 'AddLabel', 'X offset', 'flashbang', 'GetName', 'Force safe point', 'Safe point', 'Tickrate', 'DisableRecharge', 'hypot', 'getHours', ' | delay: ', 'galil ar', 'userid', 'AddHotkey', 'Frametime', 'FRAME_NET_UPDATE_START', 'IsMenuOpen', 'Moving', 'Double tap', 'IsAlive', 'bayonet', 'keybinding', 'awp', 'Yaw offset', 'Welcome! ', 'round', 'IsHotkeyActive', 'AUTOSNIPER', 'bowie knife', 'm_flNextAttack', 'toUpperCase', 'Stand AA Mode', 'ONSHOT', 'General', 'Y Offset', 'Normal', 'GetServerString', 'F A K E L A G', 'navaja knife', 'atan', 'sin', 'm_flSimulationTime', 'high explosive grenade', 'player_hurt', 'FilledRect', 'String', 'Safe_Head', 'Air', 'GetValue', 'SCOUT', 'falchion knife', 'Galil AR', '[holding]', 'GetRealYaw', 'incendiary grenade', 'Force Body Aim value HP', 'Script items', 'GetCharge', 'GENERAL', 'ump 45', 'cos', 'Adaptive Fake Lags', 'main_hotkeys', 'sawed off', 'attacker', '___________', 'GetInt', 'getSeconds', 'GetProp', 'Polygon', 'real_additional_type', 'jajaja', 'weapon_fire', 'DMG over', '[BG]cordOwnedshit script DT', 'SetColor', 'moving_real_type', 'GetLocalPlayer', 'Fake', 'Head|Safety|Baim Conditions', 'dual berettas', 'Doubletap', 'OverrideTolerance', 'Enable', 'HEAVY PISTOL', 'ToggleHotkey', 'draw', 'SetLBYOffset'];
(function (_0x254ca5, _0x52c09f) {
    var _0xb56f92 = function (_0x193ddd) {
        while (--_0x193ddd) {
            _0x254ca5['push'](_0x254ca5['shift']());
        }
    };
    _0xb56f92(++_0x52c09f);
}(_0x52c0, 0x100));
var _0xb56f = function (_0x254ca5, _0x52c09f) {
    _0x254ca5 = _0x254ca5 - 0x0;
    var _0xb56f92 = _0x52c0[_0x254ca5];
    return _0xb56f92;
};
var userlist = _0xb56f('0x71');
if (userlist[_0xb56f('0x94')](Cheat[_0xb56f('0xca')]()) == -0x1) {
    username = Cheat['GetUsername'](), Cheat[_0xb56f('0xc1')]([0xff, 0x0, 0x0, 0x19], '\x0a' + _0xb56f('0xfa') + _0xb56f('0x2a') + username + '\x0a' + '\x0a'), UI[_0xb56f('0xe2')](_0xb56f('0x88')), UI[_0xb56f('0xe2')](_0xb56f('0xc7')), UI[_0xb56f('0xe2')](_0xb56f('0xaa')), UI[_0xb56f('0x57')](_0xb56f('0x8f')), UI[_0xb56f('0xe2')](_0xb56f('0xaa')), UI[_0xb56f('0xe2')](_0xb56f('0x14')), UI[_0xb56f('0xe2')](_0xb56f('0x7f'));

    function getPlayerHealth(_0x5875db) {
        return Entity['GetProp'](_0x5875db, _0xb56f('0x99'), 'm_iHealth');
    }

    function getval(_0x50c8c) {
        return UI['GetValue'](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0x50c8c);
    }

    function ui() {
        UI[_0xb56f('0xbb')](_0xb56f('0x75')), UI[_0xb56f('0x2f')](_0xb56f('0xdc'), 0x0, 0x78), UI[_0xb56f('0xbb')]('Prefer Safe Point'), UI[_0xb56f('0x2f')]('Prefer Safe Point value HP', 0x0, 0x78), UI[_0xb56f('0xbb')](_0xb56f('0xc8')), UI[_0xb56f('0x2f')](_0xb56f('0x119'), 0x0, 0x78), UI['AddCheckbox'](_0xb56f('0x65')), UI[_0xb56f('0x2f')](_0xb56f('0xc6'), 0x0, 0x78);
    }

    function main() {
        var _0x5568da = 'Prefer Body Aim',
            _0x2f3a6c = _0xb56f('0xdc'),
            _0x1d3c96 = _0xb56f('0x89'),
            _0x4e1b67 = _0xb56f('0xb3'),
            _0x424503 = _0xb56f('0xc8'),
            _0x5acbaf = _0xb56f('0x119'),
            _0x2bb965 = _0xb56f('0x65'),
            _0x2fd066 = 'Force Safe Point value HP',
            _0x250449 = UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x103'), _0xb56f('0x4a')),
            _0x59fa60 = UI['IsHotkeyActive'](_0xb56f('0x1f'), 'GENERAL', _0xb56f('0x103'), _0xb56f('0xe6'));
        enemy = Ragebot['GetTarget'](), enemyhp = getPlayerHealth(enemy), _0x5568da && (enemyhp < _0x2f3a6c ? (UI[_0xb56f('0x95')]('Rage', _0xb56f('0x11c'), 'Accuracy', _0xb56f('0x9e'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x2d'), _0xb56f('0x60'), _0xb56f('0x9e'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), 'HEAVY PISTOL', _0xb56f('0x60'), _0xb56f('0x9e'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x113'), _0xb56f('0x60'), _0xb56f('0x9e'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x33'), 'Accuracy', 'Prefer body aim', !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), 'AUTOSNIPER', _0xb56f('0x60'), _0xb56f('0x9e'), !![])) : (UI['SetValue'](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x60'), _0xb56f('0x9e'), ![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x2d'), 'Accuracy', _0xb56f('0x9e'), ![]), UI[_0xb56f('0x95')]('Rage', _0xb56f('0x19'), _0xb56f('0x60'), _0xb56f('0x9e'), ![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x113'), _0xb56f('0x60'), _0xb56f('0x9e'), ![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x33'), _0xb56f('0x60'), _0xb56f('0x9e'), ![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0xfd'), _0xb56f('0x60'), _0xb56f('0x9e'), ![]))), _0x1d3c96 && (enemyhp < _0x4e1b67 ? (UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x60'), _0xb56f('0x2b'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x2d'), _0xb56f('0x60'), _0xb56f('0x2b'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x19'), 'Accuracy', 'Prefer safe point', !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x113'), _0xb56f('0x60'), _0xb56f('0x2b'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x33'), _0xb56f('0x60'), _0xb56f('0x2b'), !![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0xfd'), _0xb56f('0x60'), 'Prefer safe point', !![])) : (UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x60'), 'Prefer safe point', ![]), UI['SetValue'](_0xb56f('0x1f'), _0xb56f('0x2d'), 'Accuracy', _0xb56f('0x2b'), ![]), UI['SetValue'](_0xb56f('0x1f'), _0xb56f('0x19'), _0xb56f('0x60'), _0xb56f('0x2b'), ![]), UI[_0xb56f('0x95')](_0xb56f('0x1f'), _0xb56f('0x113'), _0xb56f('0x60'), _0xb56f('0x2b'), ![]), UI[_0xb56f('0x95')]('Rage', _0xb56f('0x33'), _0xb56f('0x60'), _0xb56f('0x2b'), ![]), UI['SetValue']('Rage', _0xb56f('0xfd'), _0xb56f('0x60'), _0xb56f('0x2b'), ![]))), _0x424503 && (enemyhp < _0x5acbaf ? !_0x250449 && UI[_0xb56f('0x1a')](_0xb56f('0x1f'), 'GENERAL', _0xb56f('0x103'), _0xb56f('0x4a')) : _0x250449 && UI[_0xb56f('0x1a')](_0xb56f('0x1f'), _0xb56f('0x11c'), 'General', _0xb56f('0x4a'))), _0x2bb965 && (enemyhp < _0x2fd066 ? !_0x59fa60 && UI[_0xb56f('0x1a')](_0xb56f('0x1f'), 'GENERAL', 'General', _0xb56f('0xe6')) : _0x59fa60 && UI[_0xb56f('0x1a')](_0xb56f('0x1f'), _0xb56f('0x11c'), 'General', _0xb56f('0xe6')));
    }
    ui();

    function GetVelocity(_0x3baa3f) {
        var _0x1da8b2 = Entity['GetProp'](_0x3baa3f, _0xb56f('0xd8'), _0xb56f('0x9d'));
        return Math[_0xb56f('0x67')](_0x1da8b2[0x0] * _0x1da8b2[0x0] + _0x1da8b2[0x1] * _0x1da8b2[0x1]);
    }
    var target = 0x0,
        hs_type = [_0xb56f('0x111'), _0xb56f('0x52'), _0xb56f('0xf3'), _0xb56f('0xcf')],
        body_type = ['Air', _0xb56f('0x52'), _0xb56f('0xf3'), _0xb56f('0x9b')],
        ui2 = {
            'hs_type': UI[_0xb56f('0x85')]('Prefer Head', hs_type),
            'body_type': UI[_0xb56f('0x85')](_0xb56f('0x5b'), body_type)
        };

    function forcehsair() {
        GetVelocity(target) <= 0x1 && Ragebot['ForceHitboxSafety'](0x0);
    }

    function forcehsstand() {
        GetVelocity(target) <= 1.1 && Ragebot[_0xb56f('0xab')](0x0);
    }

    function forcehsmoving() {
        GetVelocity(target) <= 0xc8 && Ragebot[_0xb56f('0xab')](0x0);
    }

    function forcehsshot() {
        GetVelocity(target) <= 0x0 && Ragebot['ForceHitboxSafety'](0x0);
    }

    function forcebodyair() {
        GetVelocity(target) <= 0x1 && Ragebot['ForceHitboxSafety'](0x2 && 0x3 && 0x5);
    }

    function forcebodystand() {
        GetVelocity(target) <= 1.1 && Ragebot[_0xb56f('0xab')](0x2 && 0x3 && 0x5);
    }

    function forcebodymove() {
        GetVelocity(target) <= 0xc8 && Ragebot[_0xb56f('0xab')](0x2 && 0x3 && 0x5);
    }

    function forcebodylet() {
        enemyhp <= 0x5a && Ragebot[_0xb56f('0xab')](0x2 && 0x3 && 0x5);
    }

    function jajaja() {
        var _0x411996 = UI['GetValue'][_0xb56f('0xa0')](ui2['hs_type']),
            _0x9daed7 = UI[_0xb56f('0x112')][_0xb56f('0xa0')](ui2[_0xb56f('0x43')]);
        switch (_0x411996) {
        case 0x1:
            forcehsair;
            break;
        case 0x2:
            forcehsstand;
            break;
        case 0x3:
            forcehsmoving;
            break;
        case 0x4:
            forcehsshot;
            break;
        }
        switch (_0x9daed7) {
        case 0x1:
            forcebodyair;
            break;
        case 0x2:
            forcebodystand;
            break;
        case 0x3:
            forcebodymove;
            break;
        case 0x4:
            forcebodylet;
            break;
        }
        Cheat[_0xb56f('0x8d')]('CreateMove', _0xb56f('0xc'));
    }
    UI[_0xb56f('0xbb')](_0xb56f('0x83')), UI[_0xb56f('0xbb')](_0xb56f('0xb1')), UI['AddHotkey'](_0xb56f('0x31'));
    var last_shot_time = [];

    function on_draw() {
        if (!UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x83')) || !UI[_0xb56f('0xfc')](_0xb56f('0x21'), _0xb56f('0x31')) || !UI[_0xb56f('0x112')]('Misc', _0xb56f('0xb1'))) return;
        var _0x5089c8 = Render[_0xb56f('0x4d')](_0xb56f('0x6e'), 0x12, 0x320);
        Render[_0xb56f('0x54')](0x38, 0x259, 0x1, 'ONSHOT', [0x0, 0x0, 0x0, 0xff], _0x5089c8), Render[_0xb56f('0x54')](0x37, 0x258, 0x1, _0xb56f('0x102'), [0xff, 0xd, 0x32, 0xff], _0x5089c8);
    }

    function on_create_move() {
        if (!UI['GetValue']('Misc', _0xb56f('0x83')) || !UI[_0xb56f('0xfc')](_0xb56f('0x21'), _0xb56f('0x31'))) return;
        var _0x33d2ed = Entity[_0xb56f('0x12')]();
        if (!Entity['IsAlive'](_0x33d2ed)) return;
        var _0x54d3db = Entity[_0xb56f('0x1e')]();
        for (var _0x54a8e4 = 0x0; _0x54a8e4 < _0x54d3db[_0xb56f('0x3d')]; _0x54a8e4++) {
            var _0x185f43 = _0x54d3db[_0x54a8e4],
                _0x546bf4 = Globals['Tickcount']() - last_shot_time[_0x185f43],
                _0x1bef3d = _0x546bf4 >= 0x0 && _0x546bf4 <= 0xc;
            if (!_0x1bef3d) Ragebot[_0xb56f('0xac')](_0x185f43);
        }
    }

    function on_weapon_fire() {
        var _0x3a1bdc = Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')](_0xb56f('0xee')));
        last_shot_time[_0x3a1bdc] = Globals[_0xb56f('0xc2')]();
    }

    function on_player_connect() {
        var _0x55b38a = Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')](_0xb56f('0xee')));
        if (_0x55b38a == Entity['GetLocalPlayer']()) last_shot_time = [];
    }
    Cheat[_0xb56f('0x8d')]('weapon_fire', _0xb56f('0xdf')), Cheat['RegisterCallback']('player_connect_full', _0xb56f('0x34')), Cheat['RegisterCallback'](_0xb56f('0xc5'), _0xb56f('0x69')), Cheat[_0xb56f('0x8d')](_0xb56f('0x44'), _0xb56f('0x64')), UI[_0xb56f('0xe2')](_0xb56f('0x2')), UI[_0xb56f('0xe2')](_0xb56f('0x7a')), UI[_0xb56f('0x2f')](_0xb56f('0x42'), 0x0, 0xe), UI[_0xb56f('0x2f')](_0xb56f('0xb0'), 0x0, 0xe);
    var tickcount = 0x0,
        flip = ![];

    function onCM() {
        var _0x33fffb = UI[_0xb56f('0x112')](_0xb56f('0x11a'), _0xb56f('0x42')),
            _0x415df3 = UI['GetValue'](_0xb56f('0x11a'), _0xb56f('0xb0'));
        tickcount >= _0x415df3 && !flip && (flip = !![], tickcount = 0x0), tickcount >= _0x33fffb && flip && (flip = ![], tickcount = 0x0), UI[_0xb56f('0x95')](_0xb56f('0x29'), _0xb56f('0x41'), 'Limit', !flip ? _0x415df3 : 0x0), tickcount++;
    }

    function roundstart() {
        tickcount = 0x0;
    }
    UI[_0xb56f('0xe2')](_0xb56f('0xba')), UI[_0xb56f('0xe2')](_0xb56f('0x6'));
    var real_types = [_0xb56f('0x13')],
        lby_types = [_0xb56f('0x8c'), _0xb56f('0x105'), _0xb56f('0x37')],
        real_additional_types = [_0xb56f('0xb6'), _0xb56f('0xdb'), _0xb56f('0x6f'), 'Sine'],
        moving_real_types = ['Default', _0xb56f('0xdb'), _0xb56f('0x6f'), 'shit script', _0xb56f('0xa3')],
        override = UI[_0xb56f('0xbb')]('AA'),
        aa = {
            'real_type': UI[_0xb56f('0x28')](_0xb56f('0x9f'), real_types),
            'lby_type': UI['AddDropdown'](_0xb56f('0x73'), lby_types),
            'real_additional_type': UI[_0xb56f('0x28')](_0xb56f('0x5a'), real_additional_types),
            'moving_real_type': UI[_0xb56f('0x28')](_0xb56f('0x101'), moving_real_types)
        };

    function LBY_opposite(_0x3c0875) {
        var _0x1b9e3a = Local[_0xb56f('0x117')](),
            _0x491b70 = Local[_0xb56f('0x78')](),
            _0x34f69d = Entity[_0xb56f('0x12')](),
            _0x3ecff7 = Entity[_0xb56f('0x9')](_0x34f69d, _0xb56f('0xad'), 'm_angEyeAngles[0]')[0x1],
            _0x506d31 = _0x3ecff7 - _0x491b70;
        if (_0x506d31 > -0xb4) _0x506d31 -= -0x168;
        if (_0x506d31 < 0xb4) _0x506d31 += -0x168;
        if (_0x506d31 > -0x14 && _0x3c0875) return AntiAim[_0xb56f('0x1c')](-0x5a), -0x5a;
        else return _0x506d31 < 0x14 && !_0x3c0875 ? (AntiAim[_0xb56f('0x1c')](0x5a), 0x5a) : (AntiAim[_0xb56f('0x1c')](-0xb4), -0xb4);
    }
    var flip = ![];

    function switch_opposite(_0x53d13c) {
        var _0x39ce08 = LBY_opposite(flip ? !_0x53d13c : _0x53d13c);
        _0x39ce08 == 0xb4 && (flip = !flip);
    }
    var flip2 = ![],
        last = 0x0;

    function switch_real_moving(_0x594bf3) {
        var _0x5984da = Entity[_0xb56f('0x12')](),
            _0x33444c = Entity[_0xb56f('0x9')](_0x5984da, _0xb56f('0xd8'), _0xb56f('0x9d')),
            _0x3e6ea3 = Math[_0xb56f('0x67')](_0x33444c[0x0] * _0x33444c[0x0] + _0x33444c[0x1] * _0x33444c[0x1] + _0x33444c[0x2] * _0x33444c[0x2]);
        if (_0x3e6ea3 > 0x1) return;
        var _0x106d24 = Globals[_0xb56f('0x3a')]() - Entity[_0xb56f('0x9')](_0x5984da, _0xb56f('0x26'), _0xb56f('0x10b'));
        last > _0x106d24 && (flip2 = !flip2), AntiAim[_0xb56f('0x3e')](flip2 ? -0x5a : 0x5a), AntiAim[_0xb56f('0x1c')](0x2d), last = _0x106d24;
    }

    function bgsync_real_moving(_0x3e90f1) {
        var _0x52d7bd = Entity[_0xb56f('0x12')](),
            _0x4c41a0 = Entity[_0xb56f('0x9')](_0x52d7bd, 'CBasePlayer', _0xb56f('0x9d')),
            _0x2d02d6 = Math[_0xb56f('0x67')](_0x4c41a0[0x0] * _0x4c41a0[0x0] + _0x4c41a0[0x1] * _0x4c41a0[0x1] + _0x4c41a0[0x2] * _0x4c41a0[0x2]);
        if (_0x2d02d6 > 0x1) return;
        var _0x1d9bb1 = Globals[_0xb56f('0x3a')]() - Entity[_0xb56f('0x9')](_0x52d7bd, _0xb56f('0x26'), 'm_flSimulationTime');
        last > _0x1d9bb1 && (flip2 = !flip2);
        var _0x5c1a67 = Math[_0xb56f('0xbd')]() * -0x25 * 0x3 * 0x2d;
        AntiAim[_0xb56f('0x3e')](flip2 ? -0xe : 0x22), AntiAim[_0xb56f('0x3e')](_0x5c1a67), last = _0x1d9bb1;
    }

    function lagsync_real_moving(_0x753acc) {
        var _0x92f17 = Entity[_0xb56f('0x12')](),
            _0x2c5929 = Entity[_0xb56f('0x9')](_0x92f17, _0xb56f('0xd8'), _0xb56f('0x9d')),
            _0x34d109 = Math[_0xb56f('0x67')](_0x2c5929[0x0] * _0x2c5929[0x0] + _0x2c5929[0x1] * _0x2c5929[0x1] + _0x2c5929[0x2] * _0x2c5929[0x2]);
        if (_0x34d109 > 0x1) return;
        var _0x34e96a = Globals[_0xb56f('0x3a')]() - Entity[_0xb56f('0x9')](_0x92f17, _0xb56f('0x26'), _0xb56f('0x10b'));
        last > _0x34e96a && (flip2 = !flip2);
        var _0x4fc3f8 = Math[_0xb56f('0xbd')]() * 0x2d * 0x5 * -0x2b;
        AntiAim[_0xb56f('0x3e')](_0x4fc3f8), last = _0x34e96a;
    }

    function jitter_real_moving(_0x451ee4) {
        var _0xb21bc2 = Entity['GetLocalPlayer'](),
            _0x3add81 = Entity[_0xb56f('0x9')](_0xb21bc2, _0xb56f('0xd8'), _0xb56f('0x9d')),
            _0x14c4d2 = Math[_0xb56f('0x67')](_0x3add81[0x0] * _0x3add81[0x0] + _0x3add81[0x1] * _0x3add81[0x1] + _0x3add81[0x2] * _0x3add81[0x2]);
        if (_0x14c4d2 > 0x1) return;
        var _0x156af2 = Globals['Curtime']() - Entity[_0xb56f('0x9')](_0xb21bc2, _0xb56f('0x26'), _0xb56f('0x10b'));
        last > _0x156af2 && (flip2 = !flip2);
        var _0x17641d = Math['random']() * 0xf * 0x1 * -0x5;
        AntiAim[_0xb56f('0x3e')](_0x17641d), last = _0x156af2;
    }

    function half_jitter(_0xedf082) {
        var _0x42ccca = Entity[_0xb56f('0x12')](),
            _0x563d01 = Entity[_0xb56f('0x9')](_0x42ccca, _0xb56f('0xd8'), _0xb56f('0x9d')),
            _0x56ec = Math[_0xb56f('0x67')](_0x563d01[0x0] * _0x563d01[0x0] + _0x563d01[0x1] * _0x563d01[0x1] + _0x563d01[0x2] * _0x563d01[0x2]);
        if (_0x56ec < 0x1e) return;
        var _0x2e78f6 = Math['random']() * 0x27,
            _0x4cf851 = _0xedf082 ? _0x2e78f6 : -_0x2e78f6;
        AntiAim[_0xb56f('0x3e')](_0x4cf851);
    }

    function switch_real(_0x2b6691) {
        var _0x7ff816 = Entity[_0xb56f('0x12')](),
            _0x4297c7 = Entity[_0xb56f('0x9')](_0x7ff816, _0xb56f('0xd8'), _0xb56f('0x9d')),
            _0x4dbbe7 = Math[_0xb56f('0x67')](_0x4297c7[0x0] * _0x4297c7[0x0] + _0x4297c7[0x1] * _0x4297c7[0x1] + _0x4297c7[0x2] * _0x4297c7[0x2]);
        if (_0x4dbbe7 < 0x1e) return;
        var _0x577e16 = Globals['Curtime']() - Entity['GetProp'](_0x7ff816, 'CBaseEntity', 'm_flSimulationTime');
        last > _0x577e16 && (flip2 = !flip2), AntiAim[_0xb56f('0x3e')](flip2 ? -0x3a : 0x3a), AntiAim[_0xb56f('0x1c')](0x2d), last = _0x577e16;
    }

    function sine_real_moving(_0x1980db) {
        var _0x134c8c = Entity[_0xb56f('0x12')](),
            _0x2a503b = Entity['GetProp'](_0x134c8c, _0xb56f('0xd8'), 'm_vecVelocity[0]'),
            _0x1916e0 = Math[_0xb56f('0x67')](_0x2a503b[0x0] * _0x2a503b[0x0] + _0x2a503b[0x1] * _0x2a503b[0x1] + _0x2a503b[0x2] * _0x2a503b[0x2]);
        if (_0x1916e0 < 0x1e) return;
        var _0x4e08ef = 0x0;
        if (_0x1916e0 < 0x5a) _0x4e08ef = 0x28;
        else _0x4e08ef = 0x1e;
        var _0x59a825 = Math['sin'](Globals[_0xb56f('0x3a')]() * -0x5) * _0x4e08ef;
        AntiAim['SetRealOffset'](_0x59a825);
    }

    function RadToDeg(_0x3e2748) {
        return _0x3e2748 * 0xb4 / Math['PI'];
    }

    function calc_angle(_0x11c714, _0x172cd9) {
        var _0x5dcd48 = [];
        _0x5dcd48[0x0] = _0x11c714[0x0] - _0x172cd9[0x0], _0x5dcd48[0x1] = _0x11c714[0x1] - _0x172cd9[0x1], _0x5dcd48[0x2] = _0x11c714[0x2] - _0x172cd9[0x2];
        var _0xb60784 = [],
            _0x51775e = Local[_0xb56f('0x7c')]();
        _0xb60784[0x0] = RadToDeg(Math['atan'](_0x5dcd48[0x2] / Math[_0xb56f('0xea')](_0x5dcd48[0x0], _0x5dcd48[0x1]))), _0xb60784[0x1] = RadToDeg(Math[_0xb56f('0x109')](_0x5dcd48[0x1] / _0x5dcd48[0x0])), _0xb60784[0x2] = 0x0;
        if (_0x5dcd48[0x0] >= 0x0) _0xb60784[0x1] += 0xb4;
        while (_0xb60784[0x1] > 0xb4) _0xb60784[0x1] -= 0x168;
        while (_0xb60784[0x1] < -0xb4) _0xb60784[0x1] += 0x168;
        return _0xb60784;
    }

    function closest_to_fov() {
        var _0x4bae54 = Entity[_0xb56f('0x12')](),
            _0x757e21 = Entity[_0xb56f('0xcb')](_0x4bae54),
            _0x5afdc4 = Local[_0xb56f('0x7c')](),
            _0x3fb2e6 = Entity[_0xb56f('0x1e')](),
            _0xfa271a = -0x1,
            _0xdc0340 = 0xb4;
        for (i in _0x3fb2e6) {
            if (!Entity['IsAlive'](_0x3fb2e6[i])) continue;
            var _0x329b22 = calc_angle(_0x757e21, Entity[_0xb56f('0xbc')](_0x3fb2e6[i], 0x5));
            _0x329b22[0x0] -= _0x5afdc4[0x0], _0x329b22[0x1] -= _0x5afdc4[0x1];
            var _0x30eff1 = Math[_0xb56f('0x67')](_0x329b22[0x0] * _0x329b22[0x0] + _0x329b22[0x1] * _0x329b22[0x1]);
            _0x30eff1 < _0xdc0340 && (_0xdc0340 = _0x30eff1, _0xfa271a = _0x3fb2e6[i]);
        }
        return _0xfa271a;
    }

    function ang_vec(_0x2c8ed9) {
        var _0x14c06e = Math['sin'](_0x2c8ed9[0x1]),
            _0x5f40d6 = Math[_0xb56f('0x1')](_0x2c8ed9[0x1]),
            _0x453b2f = Math[_0xb56f('0x10a')](_0x2c8ed9[0x0]),
            _0x178f98 = Math[_0xb56f('0x1')](_0x2c8ed9[0x0]);
        return [_0x178f98 * _0x5f40d6, _0x178f98 * _0x14c06e, -_0x453b2f];
    }

    function vmf(_0x3dc217, _0x2da143) {
        return [_0x3dc217[0x0] * _0x2da143, _0x3dc217[0x1] * _0x2da143, _0x3dc217[0x2] * _0x2da143];
    }

    function va(_0x2b5ef8, _0x5de602) {
        return [_0x2b5ef8[0x0] + _0x5de602[0x0], _0x2b5ef8[0x1] + _0x5de602[0x1], _0x2b5ef8[0x2] + _0x5de602[0x2]];
    }
    var smart = ![];

    function smart_yaw(_0x534b3f) {
        var _0x1cace6 = Entity[_0xb56f('0x12')](),
            _0x3ebb52 = closest_to_fov();
        if (_0x3ebb52 == -0x1) return;
        var _0x4b5b94 = Entity[_0xb56f('0xcb')](_0x1cace6),
            _0x81a9bb = calc_angle(_0x4b5b94, Entity[_0xb56f('0xbc')](_0x3ebb52, 0x5)),
            _0x5bc470 = [0x0, (_0x81a9bb[0x1] + 0x5a) / 0xb4 * Math['PI'], 0x0],
            _0x3cc2d8 = [0x0, (_0x81a9bb[0x1] - 0x5a) / 0xb4 * Math['PI'], 0x0],
            _0x47d626 = function (_0x37b4ad) {
                if (_0x37b4ad[0x1] > 0xb4) _0x37b4ad[0x1] -= 0x168;
                if (_0x37b4ad[0x1] < -0xb4) _0x37b4ad[0x1] += 0x168;
                return _0x37b4ad;
            };
        _0x5bc470 = _0x47d626(_0x5bc470), _0x3cc2d8 = _0x47d626(_0x3cc2d8);
        var _0x141824 = UI['GetValue'][_0xb56f('0xa0')](null, aa),
            _0x96614b = vmf(ang_vec(_0x5bc470), _0x141824),
            _0x56c33f = vmf(ang_vec(_0x3cc2d8), _0x141824),
            _0x5e137b = va(_0x96614b, _0x4b5b94),
            _0xcda975 = va(_0x56c33f, _0x4b5b94),
            _0x4f22bd = Trace[_0xb56f('0x6a')](_0x1cace6, _0x4b5b94, _0x5e137b),
            _0x348074 = Trace[_0xb56f('0x6a')](_0x1cace6, _0x4b5b94, _0xcda975);
        _0x96614b = vmf(ang_vec(_0x5bc470), _0x141824 * _0x4f22bd[0x1]), _0x5e137b = va(_0x96614b, _0x4b5b94), _0x56c33f = vmf(ang_vec(_0x3cc2d8), _0x141824 * _0x348074[0x1]), _0xcda975 = va(_0x56c33f, _0x4b5b94), _0x4f22bd = Trace[_0xb56f('0x6a')](_0x1cace6, _0x5e137b, Entity[_0xb56f('0xbc')](_0x3ebb52, 0x5)), _0x348074 = Trace['Line'](_0x1cace6, _0xcda975, Entity[_0xb56f('0xbc')](_0x3ebb52, 0x5));
        if (_0x4f22bd[0x0] && !_0x348074[0x0]) return !![];
        if (!_0x4f22bd[0x0] && _0x348074[0x0]) return ![];
        if (!_0x4f22bd[0x0] && !_0x348074[0x0]) return _0x534b3f;

        function _0x254144(_0x22f3a3, _0x4dc28f) {
            LBY_opposite(_0x4dc28f ? smart_yaw(_0x22f3a3) : !smart_yaw(_0x22f3a3));
        }
    }

    function reset() {
        enemy_brute_stage = [];
    }
    var shots_fired = [],
        last_shots_fired = [],
        bullet_pos = [],
        hurt = -0x1,
        shooting = -0x1;

    function weapon_fire() {
        if (Entity[_0xb56f('0x45')](Event['GetInt'](_0xb56f('0xee'))) == Entity[_0xb56f('0x12')]()) return;
        if (!shots_fired[Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')](_0xb56f('0xee')))]) shots_fired[Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')](_0xb56f('0xee')))] = 0x0;
        shots_fired[Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')]('userid'))]++, shooting = Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')]('userid'));
    }

    function player_hurt() {
        if (Entity[_0xb56f('0x45')](Event[_0xb56f('0x7')](_0xb56f('0x5'))) == Entity[_0xb56f('0x12')]()) return;
        hurt = Entity[_0xb56f('0x45')](Event['GetInt'](_0xb56f('0x5')));
    }

    function bullet_impact() {
        if (Entity['GetEntityFromUserID'](Event[_0xb56f('0x7')](_0xb56f('0xee'))) == Entity[_0xb56f('0x12')]()) return;
        if (Entity[_0xb56f('0x45')](Event['GetInt'](_0xb56f('0xee'))) == shooting) bullet_pos = [Event[_0xb56f('0xa6')]('x'), Event[_0xb56f('0xa6')]('y'), Event[_0xb56f('0xa6')]('z')];
    }

    function process_shot() {
        if (shooting == -0x1) return;
        var _0xd36275 = Entity[_0xb56f('0xcb')](shooting),
            _0x143015 = bullet_pos,
            _0x1c941b = Entity[_0xb56f('0x12')](),
            _0x14667d = Entity[_0xb56f('0xbc')](_0x1c941b, 0x0),
            _0x4d648b = calc_angle(_0xd36275, _0x143015),
            _0x55cb51 = calc_angle(_0xd36275, _0x14667d),
            _0x32339f = [_0x55cb51[0x0] - _0x4d648b[0x0], _0x55cb51[0x1] - _0x4d648b[0x1], 0x0],
            _0xee258b = Math[_0xb56f('0x67')](_0x32339f[0x0] * _0x32339f[0x0] + _0x32339f[0x1] * _0x32339f[0x1]);
        _0x32339f = [_0x14667d[0x0] - _0xd36275[0x0], _0x14667d[0x1] - _0xd36275[0x1], _0x14667d[0x2] - _0xd36275[0x2]];
        var _0xf1ed22 = Math[_0xb56f('0x67')](_0x32339f[0x0] * _0x32339f[0x0] + _0x32339f[0x1] * _0x32339f[0x1] + _0x32339f[0x2] * _0x32339f[0x2]);
        if (_0xf1ed22 > 0x1f4) _0xf1ed22 = 0x1f4;
        _0xf1ed22 = 0x1f4 - _0xf1ed22, _0xf1ed22 /= 0x1c2, _0xf1ed22 *= 0x14;
        if (_0xf1ed22 < 0x2) _0xf1ed22 = 0x2;
        if (hurt != shooting && _0xee258b < _0xf1ed22) {
            if (!enemy_brute_stage[shooting]) enemy_brute_stage[shooting] = 0x0;
            enemy_brute_stage[shooting] = (enemy_brute_stage[shooting] + 0x1) % 0x3;
        }
        shooting = -0x1, hurt = -0x1, bullet_pos = [];
    }

    function onCreateMove() {
        UI[_0xb56f('0x112')][_0xb56f('0xa0')](null) && UI[_0xb56f('0x95')](_0xb56f('0x29'), _0xb56f('0x55'), _0xb56f('0xf9')());
        if (!UI[_0xb56f('0x112')][_0xb56f('0xa0')](null, override)) {
            AntiAim[_0xb56f('0x5f')](0x0);
            return;
        }
        AntiAim[_0xb56f('0x5f')](0x1);
        var _0x2c790a = UI[_0xb56f('0x112')]['apply'](null, aa[_0xb56f('0x4e')]),
            _0x54f7bc = UI['GetValue']['apply'](null, aa[_0xb56f('0x30')]),
            _0x2ff65b = UI[_0xb56f('0x112')][_0xb56f('0xa0')](null, aa[_0xb56f('0xb')]),
            _0xf0c7a3 = UI[_0xb56f('0x112')][_0xb56f('0xa0')](null, aa[_0xb56f('0x11')]),
            _0x3fb55d = UI[_0xb56f('0xfc')](_0xb56f('0x29'), _0xb56f('0x72'), 'Inverter'),
            _0x369f8d = UI[_0xb56f('0x112')][_0xb56f('0xa0')](null);
        if (_0x369f8d) {
            if (enemy_shooting == -0x1) return;
            if (!enemy_brute_stage[enemy_shooting]) enemy_brute_stage[enemy_shooting] = 0x0;
            switch (enemy_brute_stage[enemy_shooting]) {
            case 0x0:
                AntiAim[_0xb56f('0x3e')](0x0);
                break;
            case 0x1:
                AntiAim[_0xb56f('0x3e')](0x3a);
                break;
            case 0x2:
                AntiAim[_0xb56f('0x3e')](-0x3a);
                break;
            }
            return;
        }
        var _0x192b57 = 0x0;
        switch (_0x2c790a) {
        case 0x0:
            AntiAim[_0xb56f('0x3e')](_0x3fb55d ? 0x3a : -0x3a), _0x192b57 = _0x3fb55d ? -0x3a : 0x3a;
            break;
        }
        switch (_0x54f7bc) {
        case 0x0:
            LBY_opposite(_0x3fb55d);
            break;
        case 0x1:
            AntiAim[_0xb56f('0x1c')](0x0);
            break;
        case 0x2:
            AntiAim['SetRealOffset'](Math[_0xb56f('0x10a')](Globals[_0xb56f('0x3a')]() * 0x5) * 0x3a);
            break;
        }
        switch (_0x2ff65b) {
        case 0x1:
            switch_real(_0x3fb55d, _0x192b57);
            break;
        case 0x2:
            half_jitter(_0x3fb55d, _0x192b57);
            break;
        case 0x3:
            sine_real_moving(_0x3fb55d);
            break;
        }
        switch (_0xf0c7a3) {
        case 0x1:
            switch_real_moving(_0x3fb55d);
            break;
        case 0x2:
            jitter_real_moving(_0x3fb55d);
            break;
        case 0x3:
            bgsync_real_moving(_0x3fb55d);
            break;
        case 0x4:
            lagsync_real_moving(_0x3fb55d);
            break;
        }
    }
    Cheat[_0xb56f('0x8d')](_0xb56f('0x38'), _0xb56f('0x9c')), Cheat[_0xb56f('0x8d')](_0xb56f('0xd'), _0xb56f('0xd')), Cheat[_0xb56f('0x8d')]('bullet_impact', _0xb56f('0x91')), Cheat[_0xb56f('0x8d')](_0xb56f('0x10d'), 'player_hurt'), Cheat['RegisterCallback'](_0xb56f('0xc5'), 'onCreateMove'), Cheat[_0xb56f('0x8d')]('round_start', 'roundstart'), Cheat['RegisterCallback'](_0xb56f('0xc5'), _0xb56f('0x61'));
    var jitter_cache = UI[_0xb56f('0x112')](_0xb56f('0x29'), _0xb56f('0x55'), 'Jitter offset'),
        yaw_cache = UI[_0xb56f('0x112')](_0xb56f('0x29'), _0xb56f('0x55'), 'Yaw offset');
    UI[_0xb56f('0xbb')](_0xb56f('0xbf'));

    function Safe_Head() {
        localplayer_index = Entity[_0xb56f('0x12')](), UI['GetValue'](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0xbf')) && UI[_0xb56f('0xfc')](_0xb56f('0x29'), _0xb56f('0x2e'), _0xb56f('0xd1')) ? (UI[_0xb56f('0x95')]('Misc', _0xb56f('0x5c'), 'Script items', 'AA', ![]), UI[_0xb56f('0x95')]('Anti-Aim', _0xb56f('0x55'), _0xb56f('0xf9'), 0xa), UI[_0xb56f('0x95')](_0xb56f('0x29'), _0xb56f('0x55'), _0xb56f('0xcd'), 0x0), AntiAim[_0xb56f('0x5f')](0x1), AntiAim[_0xb56f('0x62')](0x0), AntiAim[_0xb56f('0x3e')](-0x14)) : (UI[_0xb56f('0x95')]('Misc', _0xb56f('0x5c'), _0xb56f('0x11a'), 'AA', !![]), UI[_0xb56f('0x95')](_0xb56f('0x29'), _0xb56f('0x55'), 'Jitter offset', jitter_cache), AntiAim[_0xb56f('0x5f')](0x1));
    }

    function Main() {
        Cheat[_0xb56f('0x8d')](_0xb56f('0xc5'), _0xb56f('0x110'));
    }
    Main();

    function get_icon(_0x555607) {
        var _0xdaad6c = '';
        switch (_0x555607) {
        case _0xb56f('0x4b'):
            _0xdaad6c = 'a';
            break;
        case 'dual berettas':
            _0xdaad6c = 'b';
            break;
        case 'five seven':
            _0xdaad6c = 'c';
            break;
        case _0xb56f('0x79'):
            _0xdaad6c = 'd';
            break;
        case _0xb56f('0xb5'):
            _0xdaad6c = 'e';
            break;
        case _0xb56f('0x98'):
            _0xdaad6c = 'f';
            break;
        case _0xb56f('0xf8'):
            _0xdaad6c = 'g';
            break;
        case _0xb56f('0x96'):
            _0xdaad6c = 'h';
            break;
        case _0xb56f('0x40'):
            _0xdaad6c = 'i';
            break;
        case _0xb56f('0x6b'):
            _0xdaad6c = 'j';
            break;
        case _0xb56f('0xed'):
            _0xdaad6c = 'k';
            break;
        case 'm4a4':
            _0xdaad6c = 'l';
            break;
        case _0xb56f('0x53'):
            _0xdaad6c = 'm';
            break;
        case _0xb56f('0xe0'):
            _0xdaad6c = 'n';
            break;
        case _0xb56f('0x51'):
            _0xdaad6c = 'o';
            break;
        case 'mp5 sd':
            _0xdaad6c = 'p';
            break;
        case _0xb56f('0x0'):
            _0xdaad6c = 'q';
            break;
        case _0xb56f('0x5d'):
            _0xdaad6c = 'r';
            break;
        case _0xb56f('0xc3'):
            _0xdaad6c = 's';
            break;
        case _0xb56f('0x27'):
            _0xdaad6c = 't';
            break;
        case _0xb56f('0x47'):
            _0xdaad6c = 'u';
            break;
        case _0xb56f('0x4'):
            _0xdaad6c = 'v';
            break;
        case _0xb56f('0xa1'):
            _0xdaad6c = 'w';
            break;
        case 'zeus x27':
            _0xdaad6c = 'x';
            break;
        case 'p250':
            _0xdaad6c = 'y';
            break;
        case _0xb56f('0xc9'):
            _0xdaad6c = 'z';
            break;
        case _0xb56f('0x36'):
            _0xdaad6c = 'A';
            break;
        case _0xb56f('0x84'):
            _0xdaad6c = 'B';
            break;
        case _0xb56f('0x8e'):
            _0xdaad6c = 'C';
            break;
        case _0xb56f('0x25'):
            _0xdaad6c = 'D';
            break;
        case 'sg 553':
            _0xdaad6c = 'E';
            break;
        case _0xb56f('0x24'):
            _0xdaad6c = 'F';
            break;
        case 'knife':
            _0xdaad6c = 'G';
            break;
        case _0xb56f('0xe4'):
            _0xdaad6c = 'H';
            break;
        case _0xb56f('0x10c'):
            _0xdaad6c = 'I';
            break;
        case 'smoke grenade':
            _0xdaad6c = 'J';
            break;
        case _0xb56f('0x46'):
            _0xdaad6c = 'K';
            break;
        case _0xb56f('0x3c'):
            _0xdaad6c = 'L';
            break;
        case _0xb56f('0x118'):
            _0xdaad6c = 'M';
            break;
        case 'c4 explosive':
            _0xdaad6c = 'N';
            break;
        case 'usp s':
            _0xdaad6c = 'P';
            break;
        case _0xb56f('0xc0'):
            _0xdaad6c = 'Q';
            break;
        case _0xb56f('0x58'):
            _0xdaad6c = 'R';
            break;
        case _0xb56f('0xf6'):
            _0xdaad6c = 'V';
            break;
        case _0xb56f('0xde'):
            _0xdaad6c = 'W';
            break;
        case _0xb56f('0x48'):
            _0xdaad6c = 'X';
            break;
        case 'karambit':
            _0xdaad6c = 'Y';
            break;
        case _0xb56f('0x70'):
            _0xdaad6c = 'Z';
            break;
        case _0xb56f('0x114'):
            _0xdaad6c = '1';
            break;
        case _0xb56f('0xfe'):
            _0xdaad6c = '2';
            break;
        case 'butterfly knife':
            _0xdaad6c = '3';
            break;
        case _0xb56f('0xb4'):
            _0xdaad6c = '4';
            break;
        case _0xb56f('0x22'):
            _0xdaad6c = '5';
            break;
        case _0xb56f('0x108'):
            _0xdaad6c = '6';
            break;
        case _0xb56f('0x7b'):
            _0xdaad6c = '7';
            break;
        case _0xb56f('0xb2'):
            _0xdaad6c = '8';
            break;
        case 'huntsman knife':
            _0xdaad6c = '0';
            break;
        default:
            _0xdaad6c = '';
            break;
        }
        return _0xdaad6c;
    }
    UI['AddLabel'](_0xb56f('0x80')), UI['AddLabel']('__________________'), UI[_0xb56f('0xbb')](_0xb56f('0xf')), UI[_0xb56f('0x2f')](_0xb56f('0x104'), 0x0, 0x2bc);
    var yoff = UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x5c'), 'Script items', _0xb56f('0x104'));
    color1 = UI[_0xb56f('0xc4')]('Misc', _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0x8f'));
    const fontpixel2 = Render[_0xb56f('0x4d')]('Verdana', 0x8, 0x64);
    var Xoffset = _0xb56f('0xe3'),
        Yoffset = 'Y offset';

    function can_shift_shot(_0x23fb77) {
        if (UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0xf'))) {
            var _0x19009e = Entity[_0xb56f('0x12')](),
                _0x1485d9 = Entity[_0xb56f('0xdd')](_0x19009e);
            if (_0x19009e == null || _0x1485d9 == null) return ![];
            var _0x18132b = Entity[_0xb56f('0x9')](_0x19009e, _0xb56f('0xad'), 'm_nTickBase'),
                _0x4c0bb5 = Globals[_0xb56f('0xa7')]() * (_0x18132b - _0x23fb77);
            if (_0x4c0bb5 < Entity['GetProp'](_0x19009e, _0xb56f('0xad'), _0xb56f('0xff'))) return ![];
            if (_0x4c0bb5 < Entity[_0xb56f('0x9')](_0x1485d9, _0xb56f('0x4f'), _0xb56f('0xa2'))) return ![];
            return !![];
        }
    }

    function _TBC_CREATE_MOVE() {
        if (UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), '[BG]cordOwnedshit script DT')) {
            var _0x2f6593 = Exploit['GetCharge']();
            Exploit[(_0x2f6593 != 0x1 ? _0xb56f('0x18') : _0xb56f('0xd2')) + _0xb56f('0xae')](0x1), can_shift_shot(0xe) && _0x2f6593 != 0x1 && (Exploit['DisableRecharge'](), Exploit[_0xb56f('0xae')]()), Exploit['OverrideTolerance'](0x0), Exploit['OverrideShift'](0xe);
        } else {
            var _0x2f6593 = Exploit[_0xb56f('0x11b')]();
            Exploit[(_0x2f6593 != 0x1 ? _0xb56f('0x18') : _0xb56f('0xd2')) + _0xb56f('0xae')](0x1), can_shift_shot(0xe) && _0x2f6593 != 0x1 && (Exploit[_0xb56f('0xe9')](), Exploit[_0xb56f('0xae')]()), Exploit[_0xb56f('0x17')](0x2), Exploit[_0xb56f('0xd6')](0xe);
        }
    }

    function _TBC_UNLOAD() {
        UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), '[BG]cordOwnedshit script DT') && Exploit['EnableRecharge']();
    }

    function _FrameNetUpdateStart() {
        UI[_0xb56f('0x112')]('Misc', _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0xf')) ? Exploit['OverrideShift'](0xe) : Exploit[_0xb56f('0xd6')](0xc);
    }
    Cheat[_0xb56f('0x8d')](_0xb56f('0xf1'), '_FrameNetUpdateStart'), Cheat[_0xb56f('0x8d')](_0xb56f('0xc5'), _0xb56f('0x66')), Cheat[_0xb56f('0x8d')](_0xb56f('0x20'), _0xb56f('0x92'));

    function main() {
        if (Entity[_0xb56f('0xf5')](Entity[_0xb56f('0x12')]()) == !![]) {
            fake = Math[_0xb56f('0xb8')](Local[_0xb56f('0x78')]()), real = Math[_0xb56f('0xb8')](Local[_0xb56f('0x117')]()), delta = 0x0;
            if (fake > real) delta = fake - real;
            else delta = real - fake;
            localplayer_index = Entity[_0xb56f('0x12')](), localplayer_weapon = Entity[_0xb56f('0xdd')](localplayer_index), weapon_name = Entity['GetName'](localplayer_weapon), x = Render[_0xb56f('0x7e')]()[0x0], Render[_0xb56f('0xa')]([
                [x - 0xaf, 0x177 + yoff],
                [x - 0x96, 0x15e + yoff],
                [x - 0x96, 0x177 + yoff]
            ], [0x0, 0x0, 0x0, 0xa]), Render[_0xb56f('0xa5')](x - 0x96, 0x15e + yoff, 0x96, 0x19, 0x1, [0x0, 0x0, 0x0, 0xa], [0x0, 0x0, 0x0, 0x14]), Render['GradientRect'](x - 0xaf, 0x177 + yoff, 0xc8, 0x1, 0x1, [0x0, 0x0, 0x0, 0xa], [0x0, 0x0, 0x0, 0x14]), Render[_0xb56f('0xa5')](x - 0xae, 0x178 + yoff, 0xc8, 0x1, 0x1, [0x0, 0x0, 0x0, 0xa], [0x0, 0x0, 0x0, 0xf]), Render[_0xb56f('0xa5')](x - 0x96, 0x15e + yoff, 0x96, 0x1, 0x1, [color1[0x0], color1[0x1], color1[0x2], color1[0x3]], [color1[0x0], color1[0x1], color1[0x2], color1[0x3]]), Render['GradientRect'](x - 0x97, 0x15f + yoff, 0x96, 0x1, 0x1, [color1[0x0], color1[0x1], color1[0x2], color1[0x3]], [color1[0x0], color1[0x1], color1[0x2], color1[0x3]]), Render[_0xb56f('0xa5')](x - 0x98, 0x160 + yoff, 0x96, 0x1, 0x1, [color1[0x0], color1[0x1], color1[0x2], color1[0x3]], [color1[0x0], color1[0x1], color1[0x2], color1[0x3]]);
            var _0x29fdc8 = Render[_0xb56f('0x4d')]('bullet', 0x13, 0x64);
            if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0xd4'), _0xb56f('0x16'))) Render[_0xb56f('0x10e')](x - 0x5c, 0x168 + yoff, 0x1, 0xb, [0xfa, 0xfa, 0xfa, 0xff]), Exploit[_0xb56f('0x11b')]() != 0x1 ? (Render[_0xb56f('0x54')](x - 0x50, 0x15f + yoff, 0x0, 'A', [0xff, 0xff, 0xff, 0xff], _0x29fdc8), Render[_0xb56f('0x10f')](x - 0x93, 0x152 + yoff, 0x0, _0xb56f('0xbe'), [0xff, 0xff, 0xff, 0xff], 0x3)) : (Render[_0xb56f('0x54')](x - 0x50, 0x15f + yoff, 0x0, 'AA', [0xff, 0xff, 0xff, 0xff], _0x29fdc8), Render[_0xb56f('0x10f')](x - 0x93, 0x152 + yoff, 0x0, 'D T   |   S T A T E: 2  tickbase (v): 14  ', [0xff, 0xff, 0xff, 0xff], 0x3)), Render[_0xb56f('0x10f')](x - 0x7d, 0x167 + yoff, 0x1, get_icon(weapon_name), [0xff, 0xff, 0xff, 0xff], 0x6);
            else UI[_0xb56f('0xfc')]('Rage', _0xb56f('0x11c'), _0xb56f('0xd4'), 'Hide shots') ? (Render[_0xb56f('0x10f')](x - 0x7d, 0x167 + yoff, 0x1, get_icon(weapon_name), [0xff, 0xff, 0xff, 0xff], 0x6), Render[_0xb56f('0x10f')](x - 0x93, 0x152 + yoff, 0x0, _0xb56f('0x7d'), [0xff, 0xff, 0xff, 0xff], 0x3)) : (Render['String'](x - 0x7d, 0x167 + yoff, 0x1, get_icon(weapon_name), [0xff, 0xff, 0xff, 0xff], 0x6), Render[_0xb56f('0x10f')](x - 0x93, 0x152 + yoff, 0x0, _0xb56f('0x107'), [0xff, 0xff, 0xff, 0xff], 0x3));
        }
    }
    Global['RegisterCallback'](_0xb56f('0x44'), _0xb56f('0xcc')), UI['AddLabel'](_0xb56f('0x50')), UI[_0xb56f('0xe2')](_0xb56f('0x6c'));
    const x1 = UI[_0xb56f('0x2f')]('X 0ffset', 0x0, Global[_0xb56f('0x7e')]()[0x0]),
        y1 = UI[_0xb56f('0x2f')]('Y 0ffset', 0x0, Global[_0xb56f('0x7e')]()[0x1]);
    var colorhotkeys = UI[_0xb56f('0xc4')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0x8f'));
    colorhotkeys[0x3] == 0x0 && UI[_0xb56f('0x10')](_0xb56f('0x21'), _0xb56f('0x5c'), 'Script items', 'BGcordOwnedshit script Color', [0x59, 0x77, 0xef, 0x3]);
    var alpha = 0x0,
        maxwidth = 0x0,
        swalpha = 0x0,
        fdalpha = 0x0,
        apalpha = 0x0,
        aialpha = 0x0,
        spalpha = 0x0,
        fbalpha = 0x0,
        dtalpha = 0x0,
        hsalpha = 0x0,
        doalpha = 0x0,
        textalpha = 0x0,
        h = new Array();

    function in_bounds(_0x36b1ce, _0x350aeb, _0x57ce3e, _0x1af2c3, _0x5aecf8) {
        return _0x36b1ce[0x0] > _0x350aeb && _0x36b1ce[0x1] > _0x57ce3e && _0x36b1ce[0x0] < _0x1af2c3 && _0x36b1ce[0x1] < _0x5aecf8;
    }

    function main_hotkeys() {
        if (!World[_0xb56f('0x106')]()) return;
        const _0xc6c52a = UI[_0xb56f('0x112')](_0xb56f('0x21'), 'JAVASCRIPT', _0xb56f('0x11a'), _0xb56f('0x82')),
            _0x1c4d6e = UI[_0xb56f('0x112')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0x6d'));
        colorhotkeys = UI['GetColor'](_0xb56f('0x21'), 'JAVASCRIPT', _0xb56f('0x11a'), _0xb56f('0x8f'));
        var _0x25abf0 = Render[_0xb56f('0x4d')](_0xb56f('0x1d'), 0x7, 0x64),
            _0x2485d9 = 0x8 * Globals[_0xb56f('0xf0')](),
            _0x2ee168 = 0x4b,
            _0x2f9a17 = 0x0;
        if (UI[_0xb56f('0xfc')](_0xb56f('0x29'), 'Extra', 'Slow walk')) swalpha = Math[_0xb56f('0x56')](swalpha + _0x2485d9, 0x1);
        else {
            swalpha = swalpha - _0x2485d9;
            if (swalpha < 0x0) swalpha = 0x0;
            swalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')](_0xb56f('0x32')));
        }
        if (UI['IsHotkeyActive'](_0xb56f('0x29'), 'Extra', _0xb56f('0x5e'))) fdalpha = Math[_0xb56f('0x56')](fdalpha + _0x2485d9, 0x1);
        else {
            fdalpha = fdalpha - _0x2485d9;
            if (fdalpha < 0x0) fdalpha = 0x0;
            fdalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')](_0xb56f('0x81')));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x21'), _0xb56f('0x11c'), _0xb56f('0x87'), _0xb56f('0xb9'))) apalpha = Math[_0xb56f('0x56')](apalpha + _0x2485d9, 0x1);
        else {
            apalpha = apalpha - _0x2485d9;
            if (apalpha < 0x0) apalpha = 0x0;
            apalpha == 0x0 && h[_0xb56f('0xe1')](h['indexOf'](_0xb56f('0xb7')));
        }
        if (UI['IsHotkeyActive']('Anti-Aim', _0xb56f('0x72'), 'Inverter')) aialpha = Math[_0xb56f('0x56')](aialpha + _0x2485d9, 0x1);
        else {
            aialpha = aialpha - _0x2485d9;
            if (aialpha < 0x0) aialpha = 0x0;
            aialpha == 0x0 && h['splice'](h['indexOf']('Anti-aim inverter'));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0x11c'), 'General', _0xb56f('0xe6'))) spalpha = Math[_0xb56f('0x56')](spalpha + _0x2485d9, 0x1);
        else {
            spalpha = spalpha - _0x2485d9;
            if (spalpha < 0x0) spalpha = 0x0;
            spalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')]('Safe point'));
        }
        if (UI['IsHotkeyActive'](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x103'), _0xb56f('0x4a'))) fbalpha = Math['min'](fbalpha + _0x2485d9, 0x1);
        else {
            fbalpha = fbalpha - _0x2485d9;
            if (fbalpha < 0x0) fbalpha = 0x0;
            fbalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')](_0xb56f('0x4a')));
        }
        if (UI['IsHotkeyActive']('Rage', 'Exploits', _0xb56f('0x16'))) dtalpha = Math[_0xb56f('0x56')](dtalpha + _0x2485d9, 0x1);
        else {
            dtalpha = dtalpha - _0x2485d9;
            if (dtalpha < 0x0) dtalpha = 0x0;
            dtalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')]('Double tap'));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0xd4'), _0xb56f('0x39'))) hsalpha = Math['min'](hsalpha + _0x2485d9, 0x1);
        else {
            hsalpha = hsalpha - _0x2485d9;
            if (hsalpha < 0x0) hsalpha = 0x0;
            hsalpha == 0x0 && h[_0xb56f('0xe1')](h[_0xb56f('0x94')](_0xb56f('0x39')));
        }
        if (UI[_0xb56f('0xfc')]('Anti-Aim', _0xb56f('0x2e'), 'Slow walk')) {
            if (h[_0xb56f('0x94')]('Slowwalking') == -0x1) h[_0xb56f('0x9a')](_0xb56f('0x32'));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x29'), _0xb56f('0x2e'), _0xb56f('0x5e'))) {
            if (h[_0xb56f('0x94')](_0xb56f('0x81')) == -0x1) h[_0xb56f('0x9a')](_0xb56f('0x81'));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x21'), _0xb56f('0x11c'), _0xb56f('0x87'), _0xb56f('0xb9'))) {
            if (h[_0xb56f('0x94')](_0xb56f('0xb7')) == -0x1) h[_0xb56f('0x9a')]('Quick peek');
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x103'), 'Force safe point')) {
            if (h[_0xb56f('0x94')]('Safe point') == -0x1) h[_0xb56f('0x9a')](_0xb56f('0xe7'));
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0x11c'), _0xb56f('0x103'), _0xb56f('0x4a'))) {
            if (h[_0xb56f('0x94')](_0xb56f('0x4a')) == -0x1) h[_0xb56f('0x9a')](_0xb56f('0x4a'));
        }
        if (UI['IsHotkeyActive']('Rage', _0xb56f('0xd4'), _0xb56f('0x16'))) {
            if (h[_0xb56f('0x94')](_0xb56f('0xf4')) == -0x1) h['push']('Double tap');
        }
        if (UI[_0xb56f('0xfc')](_0xb56f('0x1f'), _0xb56f('0xd4'), 'Hide shots')) {
            if (h[_0xb56f('0x94')](_0xb56f('0x39')) == -0x1) h[_0xb56f('0x9a')]('Hide shots');
        }
        if (h[_0xb56f('0x3d')] > 0x0) alpha = Math[_0xb56f('0x56')](alpha + _0x2485d9, 0x1);
        else {
            alpha = alpha - _0x2485d9;
            if (alpha < 0x0) alpha = 0x0;
        }
        for (i = 0x0; i < h[_0xb56f('0x3d')]; i++) {
            Render['TextSizeCustom'](h[i], _0x25abf0)[0x0] > _0x2f9a17 && (_0x2f9a17 = Render[_0xb56f('0xd7')](h[i], _0x25abf0)[0x0]);
        }
        if (_0x2f9a17 == 0x0) _0x2f9a17 = 0x32;
        _0x2ee168 = _0x2ee168 + _0x2f9a17;
        if (alpha > 0x0) {
            Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x3, _0x2ee168, 0x2, [colorhotkeys[0x0], colorhotkeys[0x1], colorhotkeys[0x2], alpha * 0xff]), Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x5, _0x2ee168, 0x12, [0x11, 0x11, 0x11, alpha * 0xff]), Render[_0xb56f('0x54')](_0xc6c52a + _0x2ee168 / 0x2 - Render[_0xb56f('0xd7')](_0xb56f('0xf7'), _0x25abf0)[0x0] / 0x2 + 0x2, _0x1c4d6e + 0x9, 0x0, _0xb56f('0xf7'), [0x0, 0x0, 0x0, alpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + _0x2ee168 / 0x2 - Render[_0xb56f('0xd7')](_0xb56f('0xf7'), _0x25abf0)[0x0] / 0x2 + 0x1, _0x1c4d6e + 0x8, 0x0, _0xb56f('0xf7'), [0xff, 0xff, 0xff, alpha * 0xff], _0x25abf0);
            for (i = 0x0; i < h[_0xb56f('0x3d')]; i++) {
                switch (h[i]) {
                case _0xb56f('0x32'):
                    Render['FilledRect'](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math[_0xb56f('0x56')](colorhotkeys[0x3], Math['min'](swalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, swalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, swalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x116'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x116'), [0x0, 0x0, 0x0, swalpha * 0xaf / 1.3], _0x25abf0), Render['StringCustom'](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x116'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x116'), [0xff, 0xff, 0xff, swalpha * 0xff], _0x25abf0);
                    break;
                case _0xb56f('0x81'):
                    Render['FilledRect'](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math[_0xb56f('0x56')](colorhotkeys[0x3], Math[_0xb56f('0x56')](fdalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, fdalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, fdalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x116'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x116'), [0x0, 0x0, 0x0, fdalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x116'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x116'), [0xff, 0xff, 0xff, fdalpha * 0xff], _0x25abf0);
                    break;
                case _0xb56f('0xb7'):
                    Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math[_0xb56f('0x56')](colorhotkeys[0x3], Math[_0xb56f('0x56')](apalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, apalpha * 0xaf / 1.3], _0x25abf0), Render['StringCustom'](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, apalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, '[toggled]', [0x0, 0x0, 0x0, apalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0xff, 0xff, 0xff, apalpha * 0xff], _0x25abf0);
                    break;
                case _0xb56f('0xe7'):
                    Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math['min'](colorhotkeys[0x3], Math[_0xb56f('0x56')](spalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, spalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, spalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0x0, 0x0, 0x0, spalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0xff, 0xff, 0xff, spalpha * 0xff], _0x25abf0);
                    break;
                case _0xb56f('0x4a'):
                    Render['FilledRect'](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math['min'](colorhotkeys[0x3], Math['min'](fbalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, fbalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, fbalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0x0, 0x0, 0x0, fbalpha * 0xaf / 1.3], _0x25abf0), Render['StringCustom'](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0xff, 0xff, 0xff, fbalpha * 0xff], _0x25abf0);
                    break;
                case 'Double tap':
                    Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math[_0xb56f('0x56')](colorhotkeys[0x3], Math[_0xb56f('0x56')](dtalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, dtalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, dtalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render['TextSizeCustom']('[toggled]', _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, '[toggled]', [0x0, 0x0, 0x0, dtalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0xff, 0xff, 0xff, dtalpha * 0xff], _0x25abf0);
                    break;
                case _0xb56f('0x39'):
                    Render[_0xb56f('0x10e')](_0xc6c52a, _0x1c4d6e + 0x17 + 0x12 * i, _0x2ee168, 0x12, [0x11, 0x11, 0x11, Math[_0xb56f('0x56')](colorhotkeys[0x3], Math['min'](hsalpha * 0x0, colorhotkeys[0x3]))]), Render[_0xb56f('0x54')](_0xc6c52a + 0x3, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0x0, 0x0, 0x0, hsalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a + 0x2, _0x1c4d6e + 0x1a + 0x12 * i, 0x0, h[i], [0xff, 0xff, 0xff, hsalpha * 0xff], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x3 + _0x2ee168 - Render[_0xb56f('0xd7')](_0xb56f('0x77'), _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, '[toggled]', [0x0, 0x0, 0x0, hsalpha * 0xaf / 1.3], _0x25abf0), Render[_0xb56f('0x54')](_0xc6c52a - 0x2 + _0x2ee168 - Render[_0xb56f('0xd7')]('[toggled]', _0x25abf0)[0x0], _0x1c4d6e + 0x1a + 0x12 * i, 0x0, _0xb56f('0x77'), [0xff, 0xff, 0xff, hsalpha * 0xff], _0x25abf0);
                    break;
                }
            }
        }
        if (Global[_0xb56f('0x23')](0x1) && UI[_0xb56f('0xf2')]()) {
            const _0x1bca5c = Global['GetCursorPosition']();
            in_bounds(_0x1bca5c, _0xc6c52a, _0x1c4d6e, _0xc6c52a + _0x2ee168, _0x1c4d6e + 0x1e) && (UI[_0xb56f('0x95')](_0xb56f('0x21'), 'JAVASCRIPT', 'Script items', _0xb56f('0x82'), _0x1bca5c[0x0] - _0x2ee168 / 0x2), UI['SetValue'](_0xb56f('0x21'), _0xb56f('0x5c'), 'Script items', _0xb56f('0x6d'), _0x1bca5c[0x1] - 0x14));
        }
    }
    Global[_0xb56f('0x8d')](_0xb56f('0x44'), _0xb56f('0x3'));
    var color = UI[_0xb56f('0xc4')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), 'BGcordOwnedshit script Color');
    color[0x3] == 0x0 && UI[_0xb56f('0x10')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0x8f'), [0x59, 0x77, 0xef, 0xff]);

    function HSVtoRGB(_0x3f60f4, _0x324a09, _0x56dbba) {
        var _0x3bf176, _0x52f828, _0x5d8896, _0x233a82, _0x2b091a, _0x56c8f6, _0x10e0d2, _0x56f4e6;
        arguments[_0xb56f('0x3d')] === 0x1 && (_0x324a09 = _0x3f60f4['s'], _0x56dbba = _0x3f60f4['v'], _0x3f60f4 = _0x3f60f4['h']);
        _0x233a82 = Math[_0xb56f('0x90')](_0x3f60f4 * 0x6), _0x2b091a = _0x3f60f4 * 0x6 - _0x233a82, _0x56c8f6 = _0x56dbba * (0x1 - _0x324a09), _0x10e0d2 = _0x56dbba * (0x1 - _0x2b091a * _0x324a09), _0x56f4e6 = _0x56dbba * (0x1 - (0x1 - _0x2b091a) * _0x324a09);
        switch (_0x233a82 % 0x6) {
        case 0x0:
            _0x3bf176 = _0x56dbba, _0x52f828 = _0x56f4e6, _0x5d8896 = _0x56c8f6;
            break;
        case 0x1:
            _0x3bf176 = _0x10e0d2, _0x52f828 = _0x56dbba, _0x5d8896 = _0x56c8f6;
            break;
        case 0x2:
            _0x3bf176 = _0x56c8f6, _0x52f828 = _0x56dbba, _0x5d8896 = _0x56f4e6;
            break;
        case 0x3:
            _0x3bf176 = _0x56c8f6, _0x52f828 = _0x10e0d2, _0x5d8896 = _0x56dbba;
            break;
        case 0x4:
            _0x3bf176 = _0x56f4e6, _0x52f828 = _0x56c8f6, _0x5d8896 = _0x56dbba;
            break;
        case 0x5:
            _0x3bf176 = _0x56dbba, _0x52f828 = _0x56c8f6, _0x5d8896 = _0x10e0d2;
            break;
        }
        return {
            'r': Math['round'](_0x3bf176 * 0xff),
            'g': Math[_0xb56f('0xfb')](_0x52f828 * 0xff),
            'b': Math[_0xb56f('0xfb')](_0x5d8896 * 0xff)
        };
    }

    function draw() {
        if (!World[_0xb56f('0x106')]()) return;
        var _0x3697b5 = new Date(),
            _0x1a33f9 = _0x3697b5[_0xb56f('0xeb')](),
            _0x397a83 = _0x3697b5[_0xb56f('0xd5')](),
            _0x1e2535 = _0x3697b5[_0xb56f('0x8')](),
            _0x4d8dfd = _0x1a33f9 <= 0x9 ? '0' + _0x3697b5[_0xb56f('0xeb')]() + ':' : _0x3697b5[_0xb56f('0xeb')]() + ':',
            _0x2b55be = _0x397a83 <= 0x9 ? '0' + _0x3697b5[_0xb56f('0xd5')]() + ':' : _0x3697b5['getMinutes']() + ':',
            _0x19d58d = _0x1e2535 <= 0x9 ? '0' + _0x3697b5['getSeconds']() : _0x3697b5['getSeconds']();
        color = UI[_0xb56f('0xc4')](_0xb56f('0x21'), _0xb56f('0x5c'), _0xb56f('0x11a'), _0xb56f('0x8f'));
        var _0x1d8c40 = Render[_0xb56f('0x4d')](_0xb56f('0x1d'), 0x7, 0x190),
            _0x2526ef = '[BG]cordOwnedshit script | ' + username + _0xb56f('0xec') + Math[_0xb56f('0xfb')](Global[_0xb56f('0x93')]() * 0x3e8)[_0xb56f('0x74')]() + _0xb56f('0xd9') + Globals[_0xb56f('0xe8')]()['toString']() + _0xb56f('0xa4') + _0x4d8dfd + _0x2b55be + _0x19d58d,
            _0x9febf9 = 0x12,
            _0x50d527 = Render['TextSizeCustom'](_0x2526ef, _0x1d8c40)[0x0] + 0x8,
            _0x425573 = Global[_0xb56f('0x7e')]()[0x0],
            _0x56a54b = 0xa;
        _0x425573 = _0x425573 - _0x50d527 - 0xa, Render['FilledRect'](_0x425573, _0x56a54b, _0x50d527, 0x2, [color[0x0], color[0x1], color[0x2], color[0x3]]), Render[_0xb56f('0x10e')](_0x425573, _0x56a54b + 0x2, _0x50d527, _0x9febf9, [0x11, 0x11, 0x11, 0xff]), Render[_0xb56f('0x54')](_0x425573 + 0x4, _0x56a54b + 0x4, 0x0, _0x2526ef, [0xff, 0xff, 0xff, 0xff], _0x1d8c40);
    }
    Cheat[_0xb56f('0x8d')](_0xb56f('0x44'), _0xb56f('0x1b')), UI[_0xb56f('0xe2')](_0xb56f('0x63')), UI[_0xb56f('0xe2')](_0xb56f('0xce'));
    var a = UI[_0xb56f('0x2f')](_0xb56f('0x59'), 0x0, 0x12c);

    function d() {
        UI[_0xb56f('0x95')]('Misc', _0xb56f('0x11c'), 'Movement', _0xb56f('0x59'), UI[_0xb56f('0x112')]['apply'](null, a));
    }
    UI[_0xb56f('0xe2')](_0xb56f('0xa8')), UI[_0xb56f('0xe2')]('_____________________'), UI[_0xb56f('0xef')]('DMG over'), UI[_0xb56f('0x2f')](_0xb56f('0x86'), 0x0, 0x82), UI[_0xb56f('0x2f')](_0xb56f('0x35'), 0x0, 0x82), UI['AddSliderInt'](_0xb56f('0x49'), 0x0, 0x82), UI[_0xb56f('0x2f')](_0xb56f('0x8a'), 0x0, 0x82);
    var heavy_cache = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0x19'), _0xb56f('0x97'), _0xb56f('0x4c')),
        scout_cache = UI[_0xb56f('0x112')](_0xb56f('0x1f'), 'SCOUT', _0xb56f('0x97'), _0xb56f('0x4c')),
        awp_cache = UI[_0xb56f('0x112')]('Rage', _0xb56f('0x33'), _0xb56f('0x97'), _0xb56f('0x4c')),
        auto_cache = UI[_0xb56f('0x112')]('Rage', _0xb56f('0xfd'), _0xb56f('0x97'), 'Minimum damage');

    function isActive(_0xad0bad) {
        return UI[_0xb56f('0xfc')](_0xb56f('0x11a'), _0xad0bad);
    }

    function setValue(_0x354c01, _0x9aca70) {
        UI[_0xb56f('0x95')]('Rage', _0x354c01[_0xb56f('0x100')](), 'Targeting', _0xb56f('0x4c'), _0x9aca70);
    }

    function isHeavyPistol(_0xe4fe8c) {
        if (_0xe4fe8c == _0xb56f('0x58') || _0xe4fe8c == _0xb56f('0x4b')) return !![];
    }

    function isAutoSniper(_0x570d98) {
        if (_0x570d98 == _0xb56f('0x25') || weapon_name == _0xb56f('0x6b')) return !![];
    }
    var restore_values = ![],
        restore_values = ![];

    function override_mindmg() {
        if (!isActive(_0xb56f('0xe'))) {
            restore_values ? (restore_values = ![], setValue(_0xb56f('0x19'), heavy_cache), setValue(_0xb56f('0x113'), scout_cache), setValue(_0xb56f('0x33'), awp_cache), setValue(_0xb56f('0xfd'), auto_cache)) : (heavy_cache = UI['GetValue'](_0xb56f('0x1f'), _0xb56f('0x19'), _0xb56f('0x97'), _0xb56f('0x4c')), scout_cache = UI[_0xb56f('0x112')](_0xb56f('0x1f'), 'SCOUT', _0xb56f('0x97'), _0xb56f('0x4c')), awp_cache = UI['GetValue'](_0xb56f('0x1f'), _0xb56f('0x33'), 'Targeting', _0xb56f('0x4c')), auto_cache = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0xfd'), _0xb56f('0x97'), _0xb56f('0x4c')));
            return;
        }
        restore_values = !![], heavy_value = UI[_0xb56f('0x112')](_0xb56f('0x11a'), _0xb56f('0x86')), scout_value = UI[_0xb56f('0x112')](_0xb56f('0x11a'), _0xb56f('0x35')), awp_value = UI['GetValue'](_0xb56f('0x11a'), _0xb56f('0x49')), auto_value = UI['GetValue'](_0xb56f('0x11a'), _0xb56f('0x8a')), weapon_name = Entity[_0xb56f('0xe5')](Entity[_0xb56f('0xdd')](Entity[_0xb56f('0x12')]())), isHeavyPistol(weapon_name) && setValue('HEAVY PISTOL', heavy_value), weapon_name == _0xb56f('0x24') && setValue(_0xb56f('0x113'), scout_value), weapon_name == _0xb56f('0xf8') && setValue(_0xb56f('0x33'), awp_value), isAutoSniper(weapon_name) && setValue(_0xb56f('0xfd'), auto_value);
    }
    Global[_0xb56f('0x8d')](_0xb56f('0xc5'), 'override_mindmg');
    var screen_size = Global[_0xb56f('0x7e')]();

    function display() {
        if (Global[_0xb56f('0xda')]() == '') return; {}

        function _0x4ef08f(_0x1b0057) {
            if (_0x1b0057 == _0xb56f('0x58') || _0x1b0057 == _0xb56f('0x4b')) return !![];
        }

        function _0x30d793(_0x17ea39) {
            if (weapon_name == _0xb56f('0x51') || weapon_name == _0xb56f('0x76') || weapon_name == 'glock 18' || weapon_name == 'five seven' || weapon_name == _0xb56f('0xaf') || _0x17ea39 == _0xb56f('0x15') || _0x17ea39 == 'p250' || _0x17ea39 == _0xb56f('0xc0')) return !![];
        }

        function _0x4c1ea0(_0x2ddee8) {
            if (_0x2ddee8 == _0xb56f('0x25') || weapon_name == _0xb56f('0x6b')) return !![];
        }

        function _0x115987(_0x1260cc) {
            if (_0x1260cc == _0xb56f('0x40') || weapon_name == _0xb56f('0x27') || _0x1260cc == 'nova' || _0x1260cc == _0xb56f('0x5d') || _0x1260cc == _0xb56f('0xa9') || _0x1260cc == _0xb56f('0xc9') || _0x1260cc == _0xb56f('0x0') || _0x1260cc == _0xb56f('0x3f') || _0x1260cc == _0xb56f('0x3b') || weapon_name == _0xb56f('0xe0') || weapon_name == 'ak 47' || weapon_name == _0xb56f('0x115') || weapon_name == _0xb56f('0x4') || weapon_name == 'SG 553' || _0x1260cc == _0xb56f('0x68') || _0x1260cc == _0xb56f('0x2c') || weapon_name == _0xb56f('0x36') || weapon_name == _0xb56f('0x96') || weapon_name == 'm4a4' || weapon_name == _0xb56f('0x53') || weapon_name == 'AUG') return !![];
        }
        weapon_name = Entity[_0xb56f('0xe5')](Entity[_0xb56f('0xdd')](Entity['GetLocalPlayer']())), wep = Entity[_0xb56f('0xe5')](Entity[_0xb56f('0xdd')](Entity['GetLocalPlayer']()));
        var _0x4985de = ' ';
        arroww = _0xb56f('0x8b');
        if (Entity[_0xb56f('0xd3')](Entity[_0xb56f('0x12')]()) && Entity['IsAlive'](Entity[_0xb56f('0x12')]())) {
            if (_0x30d793(wep)) _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0x2d'), _0xb56f('0x4c'));
            else {
                if (_0x4ef08f(wep)) _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0x19'), _0xb56f('0x4c'));
                else {
                    if (wep == 'ssg 08') _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0x113'), _0xb56f('0x4c'));
                    else {
                        if (wep == _0xb56f('0xf8')) _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), _0xb56f('0x33'), 'Minimum damage');
                        else {
                            if (_0x4c1ea0(wep)) _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), 'AUTOSNIPER', _0xb56f('0x4c'));
                            else {
                                if (_0x115987(wep)) _0x4985de = UI[_0xb56f('0x112')](_0xb56f('0x1f'), 'GENERAL', _0xb56f('0x4c'));
                            }
                        }
                    }
                }
            }
        }
        Render[_0xb56f('0x10f')](0x6, screen_size[0x1] - 0x18d, 0x0, _0x4985de + '', [0x0, 0x0, 0x0, 0xff], 0x4), Render[_0xb56f('0x10f')](0x5, screen_size[0x1] - 0x18e, 0x0, _0x4985de + '', [0xff, 0xff, 0xff, 0xff], 0x4);
    }
    Cheat[_0xb56f('0x8d')](_0xb56f('0x44'), _0xb56f('0xd0'));
} // thanks for leak putaslayer cracked by kennyx